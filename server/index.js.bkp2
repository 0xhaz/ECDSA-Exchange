const express = require('express');
const app = express();
const cors = require('cors');
const port = 3042;
const EC = require('elliptic').ec;
// Create and initialize EC context
const ec = new EC('secp256k1');
// Sign the message's hash using Javascript library
const msgHash = require('crypto-js/sha256');

// localhost can have cross origin errors
// depending on the browser you use!f
app.use(cors());
app.use(express.json());

// Generate Keys
const wallet1 = ec.genKeyPair();
const wallet2 = ec.genKeyPair();
const wallet3 = ec.genKeyPair();

// Public Keys
const pubKey1 = wallet1.getPublic().encode('hex');
const pubKey2 = wallet2.getPublic().encode('hex');
const pubKey3 = wallet3.getPublic().encode('hex');

// Private Keys
const privKey1 = wallet1.getPrivate().toString(16);
const privKey2 = wallet2.getPrivate().toString(16);
const privKey3 = wallet3.getPrivate().toString(16);

console.log({
  'wallet1 privateKey': wallet1.getPrivate().toString(16),
  'wallet1 publicKey': wallet1.getPublic().encode('hex'),
  'wallet2 privateKey': wallet2.getPrivate().toString(16),
  'wallet2 publicKey': wallet2.getPublic().encode('hex'),
  'wallet3 privateKey': wallet3.getPrivate().toString(16),
  'wallet3 publicKey': wallet3.getPublic().encode('hex'),
});

const balances = { 
  [wallet1]: 100, 
  [wallet2]: 50, 
  [wallet3]: 75, 
};


app.get('/balance/:address', (req, res) => {
  const {address} = req.params;
  const balance = balances[address] || 0;
  res.send({ balance });
});

app.post('/send', (req, res) => {
  const {sender, recipient, amount, transaction} = req.body;
  const receivedPublicKey = sender;
  const decodedKey = ec.keyFromPublic(receivedPublicKey, "hex");
  const msg = transaction.msg;
  const msgHash = SHA256(msg).toString();
  const signature = {
    r: transaction.signature.r,
    s: transaction.signature.s,
  };

  if (decodedKey.verify(msgHash, signature)){
    console.log(`You have just sent ${amount}`)
    balances[sender] -= amount;
    balances[recipient] = (balances[recipient] || 0) + +amount;
    res.send({ balance: balances[sender] });
  } else {
    console.log("Your private key is not verified");
  }
  
});

app.listen(port, () => {
  console.log(`Listening on port ${port}!`);
});

